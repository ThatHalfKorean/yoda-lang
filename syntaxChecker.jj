PARSER_BEGIN(SyntaxChecker)

public class SyntaxChecker {
    public static void main(String[] args) {
        try {
            new SyntaxChecker(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(SyntaxChecker)

SKIP: { " " | "\t" | "\r" }
TOKEN: {
    "(" | ")" | "{" | "}" | "+" | "*" | ":=" | "|" | "&" | "," | ":" | "."
    | <IF: ("if")>
	| <TO: ("to")>
	| <BY: ("by")>
	| <AND: ("and")>
	| <HMM: ("hmm")>
	| <HMMQ: ("hmm?")>
	| <IS: ("is?")>
	| <ELSE: ("else")>
	| <FROM: ("from")>
	| <DOES: ("does")>
	| <RUNS: ("runs")>
	| <WHILE: ("while")>
	| <BEGIN: ("begin")>
	| <BEGINS: ("begins")>
	| <GIVEN: ("given")>
	| <GIVES: ("gives")>
	| <TIMES: ("times")>
	| <BECOME: ("become")>
	| <BECOMES: ("becomes")>
	| <NOTHING: ("nothing")>
	| <THROUGH: ("through")>
	| <AS: ("as")>
	| <TRAINING: ("training")>
	| <MUST: ("must")>
	| <BE: ("be")>
	| <YOU: ("you")>
	| <PRINT: ("print")>
	| <GIVEBACK: ("give back")>
	| <ID: ((["a"-"z"] | ["A"-"Z"])+(["-"] | ["_"] | ["a"-"z"] | ["A"-"Z"] | ["0"-"9"])*)>
    | <NUM: (["0"-"9"])+>
    | <NUMLIT: (("0x" | "0b" | "0o")? (["0"-"9"])+("."(["0"-"9"])*)?)>
    | <STRLIT: ("\"" ("^"("\"")* ("\\\"")?)* "\"") >
    | <COMMENTS: (("<(-_-)>" (".")* <BR>) | ("<(-.-)>" (".")* "<(-.-)>"))>
    | <BR: ("\n")>
	
}


void SCRIPT(): {} { (STMT() <BR>) + <EOF> }
void STMT(): {} { LOOKAHEAD(3) DEC() | LOOKAHEAD(3) ASSIGNMENT() | LOOKAHEAD(3) PRINTSTMT() | LOOKAHEAD(3) RETURNSTMT() | LOOKAHEAD(3) CONDITIONAL()
                  | LOOKAHEAD(3) TIMESLOOP() | LOOKAHEAD(3) FORLOOP() | LOOKAHEAD(3) WHILELOOP() | LOOKAHEAD(3) PROCCALL() | EXP() }

void DEC(): {} { LOOKAHEAD(3) VARDEC() | LOOKAHEAD(3) CONSTDEC() | LOOKAHEAD(3) PROCDEC() | FUNDEC() }

void VARDEC(): {} { (EXP() (<AND> EXP())* "," <ID> ( <SKIP> <AND> <SKIP> <ID>)* <SKIP> (<BEGIN> | <BEGINS>))
                    | (<FROM> EXP() "," <ID> <SKIP> <BEGINS>) }
void CONSTDEC(): {} { EXP() "," <ID> <SKIP> <MUST> <SKIP> <BE> }
void PROCDEC(): {} { BLOCK() <GIVEN> PARAMS() "," <SKIP> <ID> <SKIP> <DOES> }
void FUNDEC(): {} { BLOCK() <GIVEN> PARAMS() "," <SKIP> <ID> <SKIP> <GIVES> }
void PARAMS(): {} { <NOTHING> | (<ID> ( <SKIP> <AND> <SKIP> <ID>)*) }
void ASSIGNMENT(): {} { EXP() (<AND> EXP())* "," <SKIP> <ID> ( <SKIP> <AND> <SKIP> <ID>)* <SKIP> (<BECOME> | <BECOMES>) }
void PRINTSTMT(): {} { EXP() <YOU> <SKIP> <PRINT> }
void RETURNSTMT(): {} { <GIVEBACK> EXP() <YOU> <SKIP> <MUST> }
void CONDITIONAL(): {} { BLOCK() <IF> EXP() (LOOKAHEAD (3) <BR> (LOOKAHEAD (<ELSE>) <ELSE> BLOCK() <IF> EXP() <BR>)* <ELSE> BLOCK())? }
void TIMESLOOP(): {} { BLOCK() EXP() <TIMES> }
void FORLOOP(): {} { BLOCK() <AS> <SKIP> <THROUGH> RANGE() <ID> <SKIP> <RUNS> }
void WHILELOOP(): {} { BLOCK() <WHILE> EXP() }
void PROCCALL(): {} { FUNCALL() }
void BLOCK(): {} { LOOKAHEAD(12) ("{" (STMT())+ "}") | ("{" (STMT() <BR>)+ "}") }
void EXP(): {} { LOOKAHEAD(3) ("(" EXP() "|" EXP() ")") | EXP1() }
void EXP1(): {} { LOOKAHEAD(3)("(" EXP1() "&" EXP1() ")") | EXP2() }
void EXP2(): {} { LOOKAHEAD (2) ("(" RELOP() EXP2() EXP2() <IS> ")") | LOOKAHEAD (2) ("(" ARITHOP() EXP2() (EXP2())+ ")") | EXP3() }
void EXP3(): {} { LOOKAHEAD (3)("(" ( UNARYOP() )? EXP3() ")") | EXP4() }
void EXP4(): {} { LOOKAHEAD (3)("(" EXP4() <HMMQ> EXP4() <HMM> EXP4() ")") | EXP5() }
void EXP5(): {} { LOOKAHEAD (2) LIT() | LOOKAHEAD (2) <ID> | LOOKAHEAD (2) ARRAY() | LOOKAHEAD (2) ARRAYLOOKUP() | LOOKAHEAD (2) OBJECT() | LOOKAHEAD (2) ANONFUN() | FUNCALL() }
void LIT(): {} { <NUMLIT> | <STRLIT> }
void ARRAY(): {} { ("[" "]") | ("[" ":" (<BR>)? EXP() ("," (<BR>)? EXP())* (<BR>)? "]") }
void ARRAYLOOKUP(): {} { <ID> "[" <NUMLIT> (":" <NUMLIT>)? "]" }
void OBJECT(): {} { "{" (":" <ID> EXP())* "}" (<TO> <SKIP> <BE> <SKIP> <ID>)? "," <SKIP> (<ID> <SKIP>)? <TRAINING> <SKIP> <BEGINS> }
void ANONFUN(): {} { BLOCK() <GIVEN> ARGS() }
void FUNCALL(): {} { (<ID>".")?"("ARGS()")"(<ID> | ANONFUN()) }
void RELOP(): {} { "<" | "<=" | "=" | "!=" | ">=" | ">" }
void ARITHOP(): {} { "*" | "/" | "+" | "-" | "^" }
void UNARYOP(): {} { "!" }

void ARGS(): {} { ARGS1() (LOOKAHEAD (2) "," ARGS1())* }
void ARGS1(): {} { EXP5() }
void RANGE(): {} { (LOOKAHEAD (2) ( LOOKAHEAD (2) <NUMLIT> | LOOKAHEAD (2) <ID> | FUNCALL()) (LOOKAHEAD (2) <TO> | <THROUGH>))? (LOOKAHEAD (2) <NUMLIT> | LOOKAHEAD (2) <ID> | FUNCALL()) (<BY> EXP3())? }
