PARSER_BEGIN(SyntaxChecker)

public class SyntaxChecker {
    public static void main(String[] args) {
        try {
            new SyntaxChecker(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(SyntaxChecker)

SKIP: { " " | "\t" | "\r" }
TOKEN: {
    "(" | ")" | "+" | "*" | ":="
    | <NUM: (["0"-"9"])+> | <BR: ("\n")>
    | <ID: ((["a"-"z"] | ["A"-"Z"])+(["-"] | ["_"] | ["a"-"z"] | ["A"-"Z"] | ["0"-"9"])*)>
    | <NUMLIT: (("0x" | "0b" | "0o")? (["0"-"9"])+("."(["0"-"9"])*)?)>
    | <STRLIT: ("\"" ("^"("\"")* ("\\\"")?)* "\"") >
    | <COMMENTS: (("<(-_-)>" (".")* <BR>) | ("<(-.-)>" (".")* "<(-.-)>"))>
}

void SCRIPT(): {} { (STMT() "\n")+ <EOF> }
void STMT(): {} { DEC() | ASSIGNMENT() | PRINTSTMT() | RETURNSTMT() | CONDITIONAL()
                  | TIMESLOOP() | FORLOOP() | WHILELOOP() | PROCCALL() | EXP() }

void DEC(): {} { VARDEC() | CONSTDEC() | PROCDEC() | FUNDEC() }

void VARDEC(): {} { (EXP() ("and" EXP())* "," <ID> ("and" <ID>)* ("begin" | "begins"))
                    | ("from" EXP() "," <ID> "begins") }
void CONSTDEC(): {} { EXP() "," <ID> "must be" }
void PROCDEC(): {} { BLOCK() "given" PARAMS() "," <ID> "does" }
void FUNDEC(): {} { BLOCK() "given" PARAMS() "," <ID> "gives" }
void PARAMS(): {} { "nothing" | (<ID> ("and" <ID>)*) }
void ASSIGNMENT(): {} { EXP() ("and" EXP())* "," <ID> ("and" <ID>)* ("become" | "becomes") }
void PRINTSTMT(): {} { EXP() "you print" }
void RETURNSTMT(): {} { "give back" EXP() "you must" }
void CONDITIONAL(): {} { BLOCK() "if" EXP() ("\n" ("else" BLOCK() "if" EXP() "\n")* "else" BLOCK())? }
void TIMESLOOP(): {} { BLOCK() EXP() "times" }
void FORLOOP(): {} { BLOCK() "as through" RANGE() <ID> "runs" }
void WHILELOOP(): {} { BLOCK() "while" EXP() }
void PROCCALL(): {} { FUNCALL() }
void BLOCK(): {} { ("{" (STMT())+ "}") | ("{" (STMT() "\n")+ "}") }
void EXP(): {} { ("(" EXP() "|" EXP() ")") | EXP1() }
void EXP1(): {} { ("(" EXP1() "&" EXP1() ")") | EXP2() }
void EXP2(): {} { ("(" RELOP() EXP2() EXP2() "is?" ")") | ("(" ARITHOP() EXP2() (EXP2())+ ")") | EXP3() }
void EXP3(): {} { ("(" ( UNARYOP() )? EXP3() ")") |  EXP4() }
void EXP4(): {} { ("(" EXP4() "hmm?" EXP4() "hmm" EXP4() ")") | EXP5() }
void EXP5(): {} { LIT() | <ID> | ARRAY() | ARRAYLOOKUP() | OBJECT() | ANONFUN() | FUNCALL() }
void LIT(): {} { <NUMLIT> | <STRLIT> }
void ARRAY(): {} { ("[" "]") | ("[:" (<BR>)? EXP() ("," ("\n")? EXP())* ("\n")? "]") }
void ARRAYLOOKUP(): {} { <ID> "[" <NUMLIT> (":" <NUMLIT>)? "]" }
void OBJECT(): {} { "{" (":" <ID> EXP())* "}" ("to be" <ID>)? "," (<ID>)? "training begins" }
void ANONFUN(): {} { BLOCK() "given" ARGS() }
void FUNCALL(): {} { (<ID>".")?"("ARGS()")"(<ID> | ANONFUN()) }
void RELOP(): {} { "<" | "<=" | "=" | "!=" | ">=" | ">" }
void ARITHOP(): {} { "*" | "/" | "+" | "-" | "^" }
void UNARYOP(): {} { "!" }

void ARGS(): {} { ARGS1() ("," ARGS1())* }
void ARGS1(): {} { EXP5() }
void RANGE(): {} { ((<NUMLIT> | <ID> | FUNCALL()) ("to" | "through"))? (<NUMLIT> | <ID> | FUNCALL()) ("by" EXP3())? }
